@on compile
@priority 5.0

define class Particle {
    public static final var DUST = "minecraft:dust"
    public static final var DUST_COLOR_TRANSITION = "minecraft:dust_color_transition"
    public static final var DUST_COLOR_TRANSITION = "minecraft:dust_color_transition"
    public static var PRIORITY_FORCE = "force"
    public static var PRIORITY_NORMAL = "normal"
    
    public static final var DEFAULT_PRIORITY = PRIORITY_NORMAL
    public static final var DEFAULT_VIEWERS = entity<@a>
    
    
    private var particle : string
    private var speed : real
    private var count : int
    
    private var priority : string
    private var viewers : entity
    
    private var firstColor : Color
    private var secondColor : Color
    private var size : real
    
    
    public new(particle : string, speed : real, count : int) {
        eval this.particle = particle
        eval this.speed = speed
        eval this.count = count
        eval this.priority = DEFAULT_PRIORITY
        eval this.viewers = DEFAULT_VIEWERS
    }
    public new(particle : string, speed : real, count : int, priority: string) {
        eval this.particle = particle
        eval this.speed = speed
        eval this.count = count
        eval this.priority = priority
        eval this.viewers = DEFAULT_VIEWERS
    }
    public new(particle : string, speed : real, count : int, priority: string, viewers : entity) {
        eval this.particle = particle
        eval this.speed = speed
        eval this.count = count
        eval this.priority = priority
        eval this.viewers = viewers
    }
    
    
    public getParticle() : string { return this.particle }
    public getSpeed() : real { return this.speed }
    public getCount() : int { return this.count }
    public getPriority() : string { return this.priority }
    public getViewers() : entity { return this.viewers }
    
    public getFirstColor() : Color { return this.firstColor }
    public getSecondColor() : Color { return this.secondColor }
    public getSize() : real { return this.size }
    
    public setParticle( particle : string ) { eval this.particle = particle }
    public setSpeed( speed : real ) { eval this.speed = speed }
    public setCount( count : int ) { eval this.count = count }
    public setPriority( priority : string ) { eval this.priority = priority }
    public setViewers( viewers : entity ) { eval this.viewers = viewers }
    
    public setFirstColor(color : Color) { eval this.firstColor = color }
    public setSecondColor(color : Color) { eval this.secondColor = color }
    
    public setFirstColor(red : real, green : real, blue : real) {
        var color = new Color(red, green, blue)
        eval this.firstColor = color
    }
    public setSecondColor(red : real, green : real, blue : real) {
        var color = new Color(red, green, blue)
        eval this.secondColor = color
    }
    
    public setSize(size : real) { eval this.size = size }
    
    
    
    public getPrimaryArgs() : string {
        return "" + getSpeed() + " " + getCount() + " " + getPriority() + " " + getViewers()
    }
    
    public getSecondaryArgs() : string {
        var args = ""
        if (getParticle().matches(DUST)) {
            eval args = " " + getFirstColor().toCommand() + " " + getSize()
        } else if (getParticle().matches(DUST_COLOR_TRANSITION)) {
            eval args = " " + getFirstColor().toCommand() + " " + getSize() + " " + getSecondColor().toCommand()
        } else {
            eval args = ""
        }
        return args
    }
}

define class ParticleCycle {
    public static final var MAX_DECIMAL_PLACE = 8
    public static final var CHANCE_ALWAYS = 1.0
    public static final var CHANCE_NEVER = 0.0
    public static final var CHANCE_LOW = 0.1
    public static final var CHANCE_NORMAL = 0.25
    public static final var CHANCE_HIGH = 0.5
    
    public static var CHANCE_RESOURCES = []
    
    public static final var PREDICATE_CHANCE_LOW = new resource(Game.NAMESPACE + ":" + "particle/particle_cycle/chance_low")
    public static final var PREDICATE_CHANCE_NORMAL = new resource(Game.NAMESPACE + ":" + "particle/particle_cycle/chance_normal")
    public static final var PREDICATE_CHANCE_HIGH = new resource(Game.NAMESPACE + ":" + "particle/particle_cycle/chance_high")
    
    public static final var DUST_COLOR_TRANSITION = "minecraft:dust_color_transition"
    public static var instanceCount : int = 0
    
    private var unit : real
    private var unitToRadian : real
    private var cycles : int
    
    private var magnitude : real
    private var perpendicularVelocity : real
    private var offset : coordinates
    
    private var particle : Particle
    private var index : int
    
    private var x : real
    private var y : real
    private var z : real
    
    public new(unit : real, magnitude : real, perpendicularVelocity : real, offset : coordinates, particle : Particle ) {
        eval this.unit = unit
        eval this.unitToRadian = Math.toRadians(this.unit)
        eval this.cycles = (int) ((2.0 * Math.PI) / this.unitToRadian) 
        
        eval this.magnitude = magnitude
        eval this.perpendicularVelocity = perpendicularVelocity
        eval this.offset = offset
        
        eval this.particle = particle
        
        eval this.index = instanceCount
        eval instanceCount += 1
    }
    
    public getIndex() : int { return this.index }
    public makeChanceResource(chance : real) : Resource {
        var resourceEntry = null
        for (var i = 0; i < ParticleCycle.CHANCE_RESOURCES.length; i++ ) {
            if (ParticleCycle.CHANCE_RESOURCES[i].Chance == chance) {
                eval resourceEntry = ParticleCycle.CHANCE_RESOURCES[i]
            }
        }
        if (resourceEntry != null) {
            return resourceEntry.Resource
        } else {
            var resource = new Resource(Game.NAMESPACE, "particle/particle_cycle", "chance" + ParticleCycle.CHANCE_RESOURCES.length, Resource.ENUM_PREDICATE)
            var resourceEntry = {
                Chance: chance,
                Resource: resource
            }
            eval ParticleCycle.CHANCE_RESOURCES.add(resourceEntry)
            return resource
        }
    }
    public static roundToDecimalPlace(val : real, places : int) : real {
        var divisor : real = Math.pow(10, places)
        var calc = Math.round(val * divisor) / divisor
        return calc
    }
    
    public draw(plane : string, invertedMotion : boolean, chance : real, timed : boolean) {
        var chance_predicate = makeChanceResource(chance).getResource()
        
        if (timed == true) {
            set @s->${Game.OBJ_LOOP} = @s->${Game.OBJ_AGE}
            set @s->${Game.OBJ_LOOP} %= $cycles
        }
        
        var x_pos : real
        var y_pos : real
        var z_pos : real
        
        var x_mot : real
        var y_mot : real
        var z_mot : real
        
        for(var i = 0; i < this.cycles; i++) {
            if (plane.matches("xy")) {
                eval x = this.magnitude * Math.sin(unitToRadian * i)
                eval y = this.magnitude * Math.cos(unitToRadian * i)
                eval z = 0
                
                eval x = roundToDecimalPlace(x, MAX_DECIMAL_PLACE)
                eval y = roundToDecimalPlace(y, MAX_DECIMAL_PLACE)
                
                eval x_mot = x
                eval y_mot = y
                eval z_mot = perpendicularVelocity
                
                if (invertedMotion == true) {
                    eval x_mot = x_mot * -1
                    eval y_mot = y_mot * -1
                }
            } else if (plane.matches("zy")) {
                eval x = 0
                eval y = this.magnitude * Math.cos(unitToRadian * i)
                eval z = this.magnitude * Math.sin(unitToRadian * i)
                
                eval y = roundToDecimalPlace(y, MAX_DECIMAL_PLACE)
                eval z = roundToDecimalPlace(z, MAX_DECIMAL_PLACE)
                
                eval x_mot = perpendicularVelocity
                eval y_mot = y
                eval z_mot = z
                
                if (invertedMotion == true) {
                    eval y_mot = y_mot * -1
                    eval z_mot = z_mot * -1
                }
            } else if (plane.matches("xz")) {
                eval x = this.magnitude * Math.sin(unitToRadian * i)
                eval y = 0
                eval z = this.magnitude * Math.cos(unitToRadian * i)
                
                eval x = roundToDecimalPlace(x, MAX_DECIMAL_PLACE)
                eval z = roundToDecimalPlace(z, MAX_DECIMAL_PLACE)
                
                eval x_mot = x
                eval y_mot = perpendicularVelocity
                eval z_mot = z
                
                if (invertedMotion == true) {
                    eval x_mot = x_mot * -1
                    eval z_mot = z_mot * -1
                }
            }
            
            eval x_pos = x + offset.getMagnitude(Axis.X)
            eval y_pos = y + offset.getMagnitude(Axis.Y)
            eval z_pos = z + offset.getMagnitude(Axis.Z)
            
            var pos = coordinates<~ ~ ~>
            .deriveMagnitude(x_pos, Axis.X)
            .deriveMagnitude(y_pos, Axis.Y)
            .deriveMagnitude(z_pos, Axis.Z)
            .deriveCoordinateType(offset.getCoordinateType(Axis.X))

            
            var motion = "" + x_mot + " " + y_mot + " " + z_mot
            
            var cmd = "particle " + particle.getParticle() + particle.getSecondaryArgs() + " " + pos + " " + motion  + " " + particle.getPrimaryArgs()
            
            function ${new resource("obj" + getIndex() + "_cycle" + i)} {
                if (timed == false) {
                    if (chance >= 1.0) {
                        function timed_false_chance_false {
                            /${cmd}
                        }
                    } else {
                        if predicate $chance_predicate
                        function timed_false_chance_true {
                            /${cmd}
                        }
                    }
                } else {
                    if (chance >= 1.0) {
                        if score @s ${Game.OBJ_LOOP} matches $i
                        function timed_true_chance_false {
                            /${cmd}
                        }
                    } else {
                        if score @s ${Game.OBJ_LOOP} matches $i
                        if predicate $chance_predicate
                        function timed_true_chance_true {
                            /${cmd}
                        }
                    }
                }
            }
            
        }
    }
    
    
    
}