@on compile
@priority 4.1


define class Bossbar {
    public static final var DEFAULT_COLOR : string = Color.BOSSBAR_WHITE
    public static final var DEFAULT_STYLE : string = Style.NOTCHED_10
    public static final var DEFAULT_MAX : int = 1000
    public static final var DEFAULT_OBJECTIVE : string = "toe.var"
    
    public var id : string
    public var displayName : text_component
    public var color : string
    public var style : string
    public var max : int
    public var objective : string
    
    public new(id : string) {
        eval this.id = id
        eval this.displayName = new text_component({"text":id})
        eval this.color = DEFAULT_COLOR
        eval this.style = DEFAULT_STYLE
        eval this.max = DEFAULT_MAX
        eval this.objective = DEFAULT_OBJECTIVE
    }
    public getID() : string { return this.id }
    public getResource() : resource { return new resource(Game.NAMESPACE + ":" + this.id) }
    public getDisplayName() : text_component { return this.displayName }
    public getColor() : string { return this.color }
    public getStyle() : string { return this.style }
    public getMax() : int { return this.max }
    public getObjective() : string { return this.objective }
    
    public setDisplayName(name : text_component) { eval this.displayName = name }
    public setColor(color : string) { eval this.color = color }
    public setStyle(style : string) { eval this.style = style }
    public setMax(max : int) { eval this.max = max }
    public setObjective(objective : string) { eval this.objective = objective }
    
    public create() {
        bossbar add ${this.getResource()} ${this.getDisplayName()}
        /${"bossbar set " + this.getResource() + " color " + this.getColor()}
        /${"bossbar set " + this.getResource() + " style " + this.getStyle()}
        bossbar set ${this.getResource()} visible true
        bossbar set ${this.getResource()} max ${this.getMax()}
        bossbar set ${this.getResource()} players @s
    }
    public remove() {
        bossbar remove ${this.getResource()}
    }
    public track() {
        store result bossbar ${this.getResource()} value scoreboard players get @s ${this.getObjective()}
    }
    public setVisible(visibility : boolean) {
        if (visibility == true) {
            bossbar set ${this.getResource()} visible true
        } else {
            bossbar set ${this.getResource()} visible false
        }
    }
}

define class BossbarFamily {
    public static final var ALLOCATIONS : int = 100
    public static final var PTR_ALLOCATIONS : pointer = pointer<#allocations->${Game.OBJ_BOSSBAR_ID}>
    public static final var TAG_REFRESH : string = "toe.bar.refresh"
    
    public static var bossbarFamilies : list = []
    
    private var model : Bossbar
    private var conditionTag : string
    
    private var bossbars : list = []
    
    public new(model : Bossbar, allocations : int) {
        eval this.model = model
        eval this.conditionTag = ""
        
        for (var i = 0; i < ALLOCATIONS; i ++) {
            var bossbar = new Bossbar("" + model.getID() + "." + i)
            eval bossbar.setDisplayName(model.getDisplayName())
            eval bossbar.setColor(model.getColor())
            eval bossbar.setStyle(model.getStyle())
            eval bossbar.setMax(model.getMax())
            eval bossbar.setObjective(model.getObjective())
            
            eval bossbars.add(bossbar)
        }
        
        
        eval bossbarFamilies.add(this)
    }
    
    public setConditionTag(tag : string) { eval this.conditionTag = tag }
    
    public getModel() : Bossbar { return this.model }
    public getPointerAllocations() : pointer { return this.ptr_allocations }
    public getConditionTag() : string { return this.conditionTag }
    public getBossbar(index : int) : Bossbar {
        return bossbars[index]
    }
    
    public static var reallocateBossbarsOnPlayerChange = function() {
        function reallocate_bossbars_on_player_change {
            set @a->${Game.OBJ_BOSSBAR_ID} = -1
            set $PTR_ALLOCATIONS = 0
            function reassign {
                tag @a[limit=1,sort=arbitrary,scores={${Game.OBJ_BOSSBAR_ID}=-1}] add $TAG_REFRESH
                set @a[tag=$TAG_REFRESH]->${Game.OBJ_BOSSBAR_ID} = $PTR_ALLOCATIONS
                tag @a[tag=$TAG_REFRESH] remove $TAG_REFRESH
                
                if entity @a[scores={${Game.OBJ_BOSSBAR_ID}=-1}]
                set $PTR_ALLOCATIONS += 1
                
                if entity @a[scores={${Game.OBJ_BOSSBAR_ID}=-1}]
                function /
            }
            
            function reallocate {
                for (var i = 0; i < bossbarFamilies.length; i ++) {
                    var family = bossbarFamilies[i]
                    function ${new resource("family_" + family.getModel().getID())} {
                        for (var j = 0; j < ALLOCATIONS; j ++) {
                            var bossbar = family.getBossbar(j)
                            function ${new resource("bossbar_" + j)} {
                                unless score ${PTR_ALLOCATIONS.target} ${PTR_ALLOCATIONS.member} matches $j..
                                function remove {
                                    eval bossbar.remove()
                                }
                                
                                if score ${PTR_ALLOCATIONS.target} ${PTR_ALLOCATIONS.member} matches $j..
                                as @a[scores={${Game.OBJ_BOSSBAR_ID}=$j}]
                                function create {
                                    eval bossbar.create()
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    public static track() {
        function track {
            for (var i = 0; i < bossbarFamilies.length; i ++) {
                var family = bossbarFamilies[i]
                function ${new resource("family_" + family.getModel().getID())} {
                    for (var j = 0; j < ALLOCATIONS; j ++) {
                        var bossbar = family.getBossbar(j)
                        function ${new resource("bossbar_" + j)} {
                            if score ${PTR_ALLOCATIONS.target} ${PTR_ALLOCATIONS.member} matches $j..
                            as @a[scores={${Game.OBJ_BOSSBAR_ID}=$j}]
                            function {
                                eval bossbar.track()
                            }
                        }
                    }
                }
            }
        }
    }
    
    public static var updateVisibility = function() {
        function {
            for (var i = 0; i < bossbarFamilies.length; i ++) {
                var family = bossbarFamilies[i]
                function ${new resource("family_" + family.getModel().getID())} {
                    if (!family.getConditionTag().matches("")) {
                        for (var j = 0; j < ALLOCATIONS; j ++) {
                            var bossbar = family.getBossbar(j)
                            function ${new resource("bossbar_" + j)} {
                                if score ${PTR_ALLOCATIONS.target} ${PTR_ALLOCATIONS.member} matches $j..
                                as @s[scores={${Game.OBJ_BOSSBAR_ID}=$j}]
                                function set_visibility {
                                    if entity @s[tag=${family.getConditionTag()}]
                                    function set_visible_true {
                                        eval bossbar.setVisible(true)
                                    }
                                    unless entity @s[tag=${family.getConditionTag()}]
                                    function set_visible_false {
                                        eval bossbar.setVisible(false)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    
    public static uninstall() {
        function uninstall {
            for (var i = 0; i < bossbarFamilies.length; i ++) {
                var family = bossbarFamilies[i]
                for (var j = 0; j < ALLOCATIONS; j ++) {
                    var bossbar = family.getBossbar(j)
                    eval bossbar.remove()
                }
            }
        }
    }
}

var bossbar_spirit = new Bossbar("spirit")
eval bossbar_spirit.setDisplayName(
    new text_component({
        "text" : "Spirit",
        "color" : Color.TEXT_GOLD,
        "bold" : true
    })
)
eval bossbar_spirit.setColor(Color.BOSSBAR_RED)
eval bossbar_spirit.setStyle(Style.NOTCHED_10)
eval bossbar_spirit.setObjective(Game.OBJ_METER_SPIRIT)
global var bossbarFamily_spirit = new BossbarFamily(bossbar_spirit, 100)
eval bossbarFamily_spirit.setConditionTag(pwr_dragon_lord.getTagID())


eval Callback.addCallback(Callback.ENUM_PLAYER_COUNT_CHANGED, BossbarFamily.reallocateBossbarsOnPlayerChange)
eval Callback.addCallback(Callback.ENUM_PLAYER_CHANGED_POWERS, BossbarFamily.updateVisibility)
eval Callback.addCallback(Callback.ENUM_PLAYER_COUNT_CHANGED, BossbarFamily.updateVisibility)